

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix;

varying vec2 v_texcoord;

uniform vec3 translatePoint;
uniform vec2 texturePoint;
uniform float scalingKoef;

mat4 translation(float tx, float ty, float tz) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = tx;
    dst[3][ 1] = ty;
    dst[3][ 2] = tz;
    dst[3][ 3] = 1.0;
    return dst;
}
mat4 scaling(float s){
    mat4 dst;

    dst[0][0] = s;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = s;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = s;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

void main() {
    mat4 sMatrix = scaling(scalingKoef);
    mat4 t1Matrix = translation(texturePoint.x,texturePoint.y,0.0);
    mat4 t2Matrix = translation(-texturePoint.x,-texturePoint.y,0.0);
    vec4 texture1 = vec4(texture,0.0,0.0)*t1Matrix;
    vec4 textureRotated = texture1*sMatrix;
    vec4 texture2 = textureRotated*t2Matrix;
    v_texcoord = vec2(texture2.x,texture2.y);
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    gl_Position = vertPos4;
    if(scalingKoef<0.0){
        vec4 tPoint = translation(translatePoint.x,translatePoint.y,translatePoint.z)*vec4(vertex,1.0);
        gl_Position = ModelViewProjectionMatrix*tPoint;
    }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec2 v_texcoord;
uniform sampler2D tmu;
uniform float scalingKoef;

void main() {
    vec4 texColor = texture2D(tmu, v_texcoord);
    gl_FragColor = texColor;
    if(scalingKoef<0.0){
        gl_FragColor = vec4(1.,0.,0.,1.);
    }
}`;